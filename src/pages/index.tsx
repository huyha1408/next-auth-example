import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import useSWR from 'swr'
import { getSession } from 'next-auth/react'

import { Hello } from '../components/Hello'

import styles from '../styles/Home.module.css'
import invariant from 'invariant'

type Todo = {
  userId: string
  id: string
  title: string
  completed: boolean
}

const fetcher = (url: string) => fetch(url).then((r) => r.json())

const usePosts = () => {
  const { data, error } = useSWR(
    'https://jsonplaceholder.typicode.com/posts',
    fetcher
  )

  return {
    posts: data,
    isLoading: !error && !data,
    error,
  }
}

const Home: NextPage<{ data: Todo }> = (props) => {
  const { data } = props
  const { posts, isLoading, error } = usePosts()

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {data.title}
      <Hello />
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const res = await fetch('https://jsonplaceholder.typicode.com/todos/1')
  const data: Todo = await res.json()

  const session = await getSession(context)

  if (session) {
    const { accessToken } = session
    const BASE_URL = process.env.NEXT_PUBLIC_AUTH_URL
    invariant(BASE_URL, 'API endpoint not configured')
    // Use token here
    const res = await fetch(`${BASE_URL}/members/me`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    const user = await res.json()

    console.log(user)
  }

  return {
    props: { data },
  }
}

export default Home
